generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model cache {
  key        String @id @db.VarChar(255)
  value      String @db.MediumText
  expiration Int
}

model cache_locks {
  key        String @id @db.VarChar(255)
  owner      String @db.VarChar(255)
  expiration Int
}

model failed_jobs {
  id         BigInt   @id @default(autoincrement()) @db.UnsignedBigInt
  uuid       String   @unique(map: "failed_jobs_uuid_unique") @db.VarChar(255)
  connection String   @db.Text
  queue      String   @db.Text
  payload    String   @db.LongText
  exception  String   @db.LongText
  failed_at  DateTime @default(now()) @db.Timestamp(0)
}

model job_batches {
  id             String  @id @db.VarChar(255)
  name           String  @db.VarChar(255)
  total_jobs     Int
  pending_jobs   Int
  failed_jobs    Int
  failed_job_ids String  @db.LongText
  options        String? @db.MediumText
  cancelled_at   Int?
  created_at     Int
  finished_at    Int?
}

model jobs {
  id           BigInt @id @default(autoincrement()) @db.UnsignedBigInt
  queue        String @db.VarChar(255)
  payload      String @db.LongText
  attempts     Int    @db.UnsignedTinyInt
  reserved_at  Int?   @db.UnsignedInt
  available_at Int    @db.UnsignedInt
  created_at   Int    @db.UnsignedInt

  @@index([queue], map: "jobs_queue_index")
}

model mazos {
  id           BigInt     @id @default(autoincrement()) @db.UnsignedBigInt
  nombre       String     @unique(map: "mazos_nombre_unique") @db.VarChar(50)
  descripcion  String     @db.VarChar(255)
  tipo_mazo_id BigInt     @db.UnsignedBigInt
  user_id      BigInt     @db.UnsignedBigInt
  created_at   DateTime?  @db.Timestamp(0)
  updated_at   DateTime?  @db.Timestamp(0)
  tipo_mazos   tipo_mazos @relation(fields: [tipo_mazo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mazos_tipo_mazo_id_foreign")
  users        users      @relation(fields: [user_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "mazos_user_id_foreign")
  tarjetas     tarjetas[]

  @@index([tipo_mazo_id], map: "mazos_tipo_mazo_id_foreign")
  @@index([user_id], map: "mazos_user_id_foreign")
}

model migrations {
  id        Int    @id @default(autoincrement()) @db.UnsignedInt
  migration String @db.VarChar(255)
  batch     Int
}

model password_reset_tokens {
  email      String    @id @db.VarChar(255)
  token      String    @db.VarChar(255)
  created_at DateTime? @db.Timestamp(0)
}

model permisos {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  nombre        String          @unique(map: "permisos_nombre_unique") @db.VarChar(50)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  role_permisos role_permisos[]
}

model personal_access_tokens {
  id             BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  tokenable_type String    @db.VarChar(255)
  tokenable_id   BigInt    @db.UnsignedBigInt
  name           String    @db.VarChar(255)
  token          String    @unique(map: "personal_access_tokens_token_unique") @db.VarChar(64)
  abilities      String?   @db.Text
  last_used_at   DateTime? @db.Timestamp(0)
  expires_at     DateTime? @db.Timestamp(0)
  created_at     DateTime? @db.Timestamp(0)
  updated_at     DateTime? @db.Timestamp(0)

  @@index([tokenable_type, tokenable_id], map: "personal_access_tokens_tokenable_type_tokenable_id_index")
}

model role_permisos {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  role_id    BigInt    @db.UnsignedBigInt
  permiso_id BigInt    @db.UnsignedBigInt
  estado     Boolean   @default(true)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  permisos   permisos  @relation(fields: [permiso_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_permisos_permiso_id_foreign")
  roles      roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "role_permisos_role_id_foreign")

  @@index([permiso_id], map: "role_permisos_permiso_id_foreign")
  @@index([role_id], map: "role_permisos_role_id_foreign")
}

model roles {
  id            BigInt          @id @default(autoincrement()) @db.UnsignedBigInt
  nombre        String          @unique(map: "roles_nombre_unique") @db.VarChar(30)
  created_at    DateTime?       @db.Timestamp(0)
  updated_at    DateTime?       @db.Timestamp(0)
  role_permisos role_permisos[]
  users         users[]
}

model sessions {
  id            String  @id @db.VarChar(255)
  user_id       BigInt? @db.UnsignedBigInt
  ip_address    String? @db.VarChar(45)
  user_agent    String? @db.Text
  payload       String  @db.LongText
  last_activity Int

  @@index([last_activity], map: "sessions_last_activity_index")
  @@index([user_id], map: "sessions_user_id_index")
}

model tarjetas {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  pregunta   String    @db.Text
  respuesta  String    @db.Text
  mazo_id    BigInt    @db.UnsignedBigInt
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  mazos      mazos     @relation(fields: [mazo_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "tarjetas_mazo_id_foreign")

  @@index([mazo_id], map: "tarjetas_mazo_id_foreign")
}

model tipo_mazos {
  id         BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  nombre     String    @unique(map: "tipo_mazos_nombre_unique") @db.VarChar(50)
  created_at DateTime? @db.Timestamp(0)
  updated_at DateTime? @db.Timestamp(0)
  mazos      mazos[]
}

model users {
  id                BigInt    @id @default(autoincrement()) @db.UnsignedBigInt
  nombres           String    @db.VarChar(50)
  apellidos         String    @db.VarChar(50)
  dpi               String    @unique(map: "users_dpi_unique") @db.VarChar(13)
  email             String    @unique(map: "users_email_unique") @db.VarChar(255)
  email_verified_at DateTime? @db.Timestamp(0)
  password          String    @db.VarChar(255)
  remember_token    String?   @db.VarChar(100)
  created_at        DateTime? @db.Timestamp(0)
  updated_at        DateTime? @db.Timestamp(0)
  role_id           BigInt    @db.UnsignedBigInt
  mazos             mazos[]
  roles             roles     @relation(fields: [role_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "users_role_id_foreign")

  @@index([role_id], map: "users_role_id_foreign")
}
